/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.wibidata.wikimedia.avro;  
@SuppressWarnings("all")
/** Record for values output from PageTableGatherer. */
@org.apache.avro.specific.AvroGenerated
public class PagePivotValues extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PagePivotValues\",\"namespace\":\"com.wibidata.wikimedia.avro\",\"doc\":\"Record for values output from PageTableGatherer.\",\"fields\":[{\"name\":\"afterTextHash\",\"type\":\"string\",\"doc\":\"MD5 hash of the after text of the revision.\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"Timestamp of revision.\"},{\"name\":\"revisionId\",\"type\":\"long\",\"doc\":\"Unique ID for the revision.\"},{\"name\":\"pageTitle\",\"type\":\"string\",\"doc\":\"The title of the page.\"}],\"aliases\":[\"com.odiago.wikimedia.avro.PagePivotValues\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** MD5 hash of the after text of the revision. */
  @Deprecated public java.lang.CharSequence afterTextHash;
  /** Timestamp of revision. */
  @Deprecated public long timestamp;
  /** Unique ID for the revision. */
  @Deprecated public long revisionId;
  /** The title of the page. */
  @Deprecated public java.lang.CharSequence pageTitle;

  /**
   * Default constructor.
   */
  public PagePivotValues() {}

  /**
   * All-args constructor.
   */
  public PagePivotValues(java.lang.CharSequence afterTextHash, java.lang.Long timestamp, java.lang.Long revisionId, java.lang.CharSequence pageTitle) {
    this.afterTextHash = afterTextHash;
    this.timestamp = timestamp;
    this.revisionId = revisionId;
    this.pageTitle = pageTitle;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return afterTextHash;
    case 1: return timestamp;
    case 2: return revisionId;
    case 3: return pageTitle;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: afterTextHash = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: revisionId = (java.lang.Long)value$; break;
    case 3: pageTitle = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'afterTextHash' field.
   * MD5 hash of the after text of the revision.   */
  public java.lang.CharSequence getAfterTextHash() {
    return afterTextHash;
  }

  /**
   * Sets the value of the 'afterTextHash' field.
   * MD5 hash of the after text of the revision.   * @param value the value to set.
   */
  public void setAfterTextHash(java.lang.CharSequence value) {
    this.afterTextHash = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * Timestamp of revision.   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp of revision.   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'revisionId' field.
   * Unique ID for the revision.   */
  public java.lang.Long getRevisionId() {
    return revisionId;
  }

  /**
   * Sets the value of the 'revisionId' field.
   * Unique ID for the revision.   * @param value the value to set.
   */
  public void setRevisionId(java.lang.Long value) {
    this.revisionId = value;
  }

  /**
   * Gets the value of the 'pageTitle' field.
   * The title of the page.   */
  public java.lang.CharSequence getPageTitle() {
    return pageTitle;
  }

  /**
   * Sets the value of the 'pageTitle' field.
   * The title of the page.   * @param value the value to set.
   */
  public void setPageTitle(java.lang.CharSequence value) {
    this.pageTitle = value;
  }

  /** Creates a new PagePivotValues RecordBuilder */
  public static com.wibidata.wikimedia.avro.PagePivotValues.Builder newBuilder() {
    return new com.wibidata.wikimedia.avro.PagePivotValues.Builder();
  }
  
  /** Creates a new PagePivotValues RecordBuilder by copying an existing Builder */
  public static com.wibidata.wikimedia.avro.PagePivotValues.Builder newBuilder(com.wibidata.wikimedia.avro.PagePivotValues.Builder other) {
    return new com.wibidata.wikimedia.avro.PagePivotValues.Builder(other);
  }
  
  /** Creates a new PagePivotValues RecordBuilder by copying an existing PagePivotValues instance */
  public static com.wibidata.wikimedia.avro.PagePivotValues.Builder newBuilder(com.wibidata.wikimedia.avro.PagePivotValues other) {
    return new com.wibidata.wikimedia.avro.PagePivotValues.Builder(other);
  }
  
  /**
   * RecordBuilder for PagePivotValues instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PagePivotValues>
    implements org.apache.avro.data.RecordBuilder<PagePivotValues> {

    private java.lang.CharSequence afterTextHash;
    private long timestamp;
    private long revisionId;
    private java.lang.CharSequence pageTitle;

    /** Creates a new Builder */
    private Builder() {
      super(com.wibidata.wikimedia.avro.PagePivotValues.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.wibidata.wikimedia.avro.PagePivotValues.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing PagePivotValues instance */
    private Builder(com.wibidata.wikimedia.avro.PagePivotValues other) {
            super(com.wibidata.wikimedia.avro.PagePivotValues.SCHEMA$);
      if (isValidValue(fields()[0], other.afterTextHash)) {
        this.afterTextHash = data().deepCopy(fields()[0].schema(), other.afterTextHash);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.revisionId)) {
        this.revisionId = data().deepCopy(fields()[2].schema(), other.revisionId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pageTitle)) {
        this.pageTitle = data().deepCopy(fields()[3].schema(), other.pageTitle);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'afterTextHash' field */
    public java.lang.CharSequence getAfterTextHash() {
      return afterTextHash;
    }
    
    /** Sets the value of the 'afterTextHash' field */
    public com.wibidata.wikimedia.avro.PagePivotValues.Builder setAfterTextHash(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.afterTextHash = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'afterTextHash' field has been set */
    public boolean hasAfterTextHash() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'afterTextHash' field */
    public com.wibidata.wikimedia.avro.PagePivotValues.Builder clearAfterTextHash() {
      afterTextHash = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public com.wibidata.wikimedia.avro.PagePivotValues.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'timestamp' field */
    public com.wibidata.wikimedia.avro.PagePivotValues.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'revisionId' field */
    public java.lang.Long getRevisionId() {
      return revisionId;
    }
    
    /** Sets the value of the 'revisionId' field */
    public com.wibidata.wikimedia.avro.PagePivotValues.Builder setRevisionId(long value) {
      validate(fields()[2], value);
      this.revisionId = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'revisionId' field has been set */
    public boolean hasRevisionId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'revisionId' field */
    public com.wibidata.wikimedia.avro.PagePivotValues.Builder clearRevisionId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'pageTitle' field */
    public java.lang.CharSequence getPageTitle() {
      return pageTitle;
    }
    
    /** Sets the value of the 'pageTitle' field */
    public com.wibidata.wikimedia.avro.PagePivotValues.Builder setPageTitle(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.pageTitle = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'pageTitle' field has been set */
    public boolean hasPageTitle() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'pageTitle' field */
    public com.wibidata.wikimedia.avro.PagePivotValues.Builder clearPageTitle() {
      pageTitle = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public PagePivotValues build() {
      try {
        PagePivotValues record = new PagePivotValues();
        record.afterTextHash = fieldSetFlags()[0] ? this.afterTextHash : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.revisionId = fieldSetFlags()[2] ? this.revisionId : (java.lang.Long) defaultValue(fields()[2]);
        record.pageTitle = fieldSetFlags()[3] ? this.pageTitle : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
