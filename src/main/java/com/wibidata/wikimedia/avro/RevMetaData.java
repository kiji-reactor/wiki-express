/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.wibidata.wikimedia.avro;  
@SuppressWarnings("all")
/** Basic meta-data about a revision. */
@org.apache.avro.specific.AvroGenerated
public class RevMetaData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RevMetaData\",\"namespace\":\"com.wibidata.wikimedia.avro\",\"doc\":\"Basic meta-data about a revision.\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Unique identifier for this revision.\"},{\"name\":\"pageId\",\"type\":\"long\",\"doc\":\"Unique identifier of the page revised.\"},{\"name\":\"pageTitle\",\"type\":\"string\",\"doc\":\"Title of the page revised.\"},{\"name\":\"timestamp\",\"type\":\"long\",\"doc\":\"The timestamp of the revision.\"},{\"name\":\"isMinor\",\"type\":\"boolean\",\"doc\":\"True if the revision was marked as minor.\"}],\"aliases\":[\"com.odiago.wikimedia.avro.RevMetaData\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Unique identifier for this revision. */
  @Deprecated public long id;
  /** Unique identifier of the page revised. */
  @Deprecated public long pageId;
  /** Title of the page revised. */
  @Deprecated public java.lang.CharSequence pageTitle;
  /** The timestamp of the revision. */
  @Deprecated public long timestamp;
  /** True if the revision was marked as minor. */
  @Deprecated public boolean isMinor;

  /**
   * Default constructor.
   */
  public RevMetaData() {}

  /**
   * All-args constructor.
   */
  public RevMetaData(java.lang.Long id, java.lang.Long pageId, java.lang.CharSequence pageTitle, java.lang.Long timestamp, java.lang.Boolean isMinor) {
    this.id = id;
    this.pageId = pageId;
    this.pageTitle = pageTitle;
    this.timestamp = timestamp;
    this.isMinor = isMinor;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return pageId;
    case 2: return pageTitle;
    case 3: return timestamp;
    case 4: return isMinor;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: pageId = (java.lang.Long)value$; break;
    case 2: pageTitle = (java.lang.CharSequence)value$; break;
    case 3: timestamp = (java.lang.Long)value$; break;
    case 4: isMinor = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * Unique identifier for this revision.   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Unique identifier for this revision.   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'pageId' field.
   * Unique identifier of the page revised.   */
  public java.lang.Long getPageId() {
    return pageId;
  }

  /**
   * Sets the value of the 'pageId' field.
   * Unique identifier of the page revised.   * @param value the value to set.
   */
  public void setPageId(java.lang.Long value) {
    this.pageId = value;
  }

  /**
   * Gets the value of the 'pageTitle' field.
   * Title of the page revised.   */
  public java.lang.CharSequence getPageTitle() {
    return pageTitle;
  }

  /**
   * Sets the value of the 'pageTitle' field.
   * Title of the page revised.   * @param value the value to set.
   */
  public void setPageTitle(java.lang.CharSequence value) {
    this.pageTitle = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * The timestamp of the revision.   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * The timestamp of the revision.   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'isMinor' field.
   * True if the revision was marked as minor.   */
  public java.lang.Boolean getIsMinor() {
    return isMinor;
  }

  /**
   * Sets the value of the 'isMinor' field.
   * True if the revision was marked as minor.   * @param value the value to set.
   */
  public void setIsMinor(java.lang.Boolean value) {
    this.isMinor = value;
  }

  /** Creates a new RevMetaData RecordBuilder */
  public static com.wibidata.wikimedia.avro.RevMetaData.Builder newBuilder() {
    return new com.wibidata.wikimedia.avro.RevMetaData.Builder();
  }
  
  /** Creates a new RevMetaData RecordBuilder by copying an existing Builder */
  public static com.wibidata.wikimedia.avro.RevMetaData.Builder newBuilder(com.wibidata.wikimedia.avro.RevMetaData.Builder other) {
    return new com.wibidata.wikimedia.avro.RevMetaData.Builder(other);
  }
  
  /** Creates a new RevMetaData RecordBuilder by copying an existing RevMetaData instance */
  public static com.wibidata.wikimedia.avro.RevMetaData.Builder newBuilder(com.wibidata.wikimedia.avro.RevMetaData other) {
    return new com.wibidata.wikimedia.avro.RevMetaData.Builder(other);
  }
  
  /**
   * RecordBuilder for RevMetaData instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RevMetaData>
    implements org.apache.avro.data.RecordBuilder<RevMetaData> {

    private long id;
    private long pageId;
    private java.lang.CharSequence pageTitle;
    private long timestamp;
    private boolean isMinor;

    /** Creates a new Builder */
    private Builder() {
      super(com.wibidata.wikimedia.avro.RevMetaData.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.wibidata.wikimedia.avro.RevMetaData.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing RevMetaData instance */
    private Builder(com.wibidata.wikimedia.avro.RevMetaData other) {
            super(com.wibidata.wikimedia.avro.RevMetaData.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pageId)) {
        this.pageId = data().deepCopy(fields()[1].schema(), other.pageId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.pageTitle)) {
        this.pageTitle = data().deepCopy(fields()[2].schema(), other.pageTitle);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[3].schema(), other.timestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isMinor)) {
        this.isMinor = data().deepCopy(fields()[4].schema(), other.isMinor);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'pageId' field */
    public java.lang.Long getPageId() {
      return pageId;
    }
    
    /** Sets the value of the 'pageId' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder setPageId(long value) {
      validate(fields()[1], value);
      this.pageId = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'pageId' field has been set */
    public boolean hasPageId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'pageId' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder clearPageId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'pageTitle' field */
    public java.lang.CharSequence getPageTitle() {
      return pageTitle;
    }
    
    /** Sets the value of the 'pageTitle' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder setPageTitle(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.pageTitle = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'pageTitle' field has been set */
    public boolean hasPageTitle() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'pageTitle' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder clearPageTitle() {
      pageTitle = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'timestamp' field */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }
    
    /** Sets the value of the 'timestamp' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder setTimestamp(long value) {
      validate(fields()[3], value);
      this.timestamp = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'timestamp' field has been set */
    public boolean hasTimestamp() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'timestamp' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder clearTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'isMinor' field */
    public java.lang.Boolean getIsMinor() {
      return isMinor;
    }
    
    /** Sets the value of the 'isMinor' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder setIsMinor(boolean value) {
      validate(fields()[4], value);
      this.isMinor = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'isMinor' field has been set */
    public boolean hasIsMinor() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'isMinor' field */
    public com.wibidata.wikimedia.avro.RevMetaData.Builder clearIsMinor() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public RevMetaData build() {
      try {
        RevMetaData record = new RevMetaData();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.pageId = fieldSetFlags()[1] ? this.pageId : (java.lang.Long) defaultValue(fields()[1]);
        record.pageTitle = fieldSetFlags()[2] ? this.pageTitle : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.timestamp = fieldSetFlags()[3] ? this.timestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.isMinor = fieldSetFlags()[4] ? this.isMinor : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
