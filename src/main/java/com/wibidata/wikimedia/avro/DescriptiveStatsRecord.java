/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.wibidata.wikimedia.avro;  
@SuppressWarnings("all")
/** A record containing statistics about a set of metrics. */
@org.apache.avro.specific.AvroGenerated
public class DescriptiveStatsRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DescriptiveStatsRecord\",\"namespace\":\"com.wibidata.wikimedia.avro\",\"doc\":\"A record containing statistics about a set of metrics.\",\"fields\":[{\"name\":\"size\",\"type\":[\"double\",\"null\"],\"doc\":\"Total number of datums in set.\"},{\"name\":\"mean\",\"type\":[\"double\",\"null\"],\"doc\":\"Mean value of data.\"},{\"name\":\"min\",\"type\":[\"double\",\"null\"],\"doc\":\"Min value of data.\"},{\"name\":\"max\",\"type\":[\"double\",\"null\"],\"doc\":\"Max value of data.\"},{\"name\":\"total\",\"type\":[\"double\",\"null\"],\"doc\":\"Sum of data.\"},{\"name\":\"variance\",\"type\":[\"double\",\"null\"],\"doc\":\"Variance of data.\"},{\"name\":\"sumSq\",\"type\":[\"double\",\"null\"],\"doc\":\"Sum of Squares of data.\",\"default\":0.0}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Total number of datums in set. */
  @Deprecated public java.lang.Double size;
  /** Mean value of data. */
  @Deprecated public java.lang.Double mean;
  /** Min value of data. */
  @Deprecated public java.lang.Double min;
  /** Max value of data. */
  @Deprecated public java.lang.Double max;
  /** Sum of data. */
  @Deprecated public java.lang.Double total;
  /** Variance of data. */
  @Deprecated public java.lang.Double variance;
  /** Sum of Squares of data. */
  @Deprecated public java.lang.Double sumSq;

  /**
   * Default constructor.
   */
  public DescriptiveStatsRecord() {}

  /**
   * All-args constructor.
   */
  public DescriptiveStatsRecord(java.lang.Double size, java.lang.Double mean, java.lang.Double min, java.lang.Double max, java.lang.Double total, java.lang.Double variance, java.lang.Double sumSq) {
    this.size = size;
    this.mean = mean;
    this.min = min;
    this.max = max;
    this.total = total;
    this.variance = variance;
    this.sumSq = sumSq;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return size;
    case 1: return mean;
    case 2: return min;
    case 3: return max;
    case 4: return total;
    case 5: return variance;
    case 6: return sumSq;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: size = (java.lang.Double)value$; break;
    case 1: mean = (java.lang.Double)value$; break;
    case 2: min = (java.lang.Double)value$; break;
    case 3: max = (java.lang.Double)value$; break;
    case 4: total = (java.lang.Double)value$; break;
    case 5: variance = (java.lang.Double)value$; break;
    case 6: sumSq = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'size' field.
   * Total number of datums in set.   */
  public java.lang.Double getSize() {
    return size;
  }

  /**
   * Sets the value of the 'size' field.
   * Total number of datums in set.   * @param value the value to set.
   */
  public void setSize(java.lang.Double value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'mean' field.
   * Mean value of data.   */
  public java.lang.Double getMean() {
    return mean;
  }

  /**
   * Sets the value of the 'mean' field.
   * Mean value of data.   * @param value the value to set.
   */
  public void setMean(java.lang.Double value) {
    this.mean = value;
  }

  /**
   * Gets the value of the 'min' field.
   * Min value of data.   */
  public java.lang.Double getMin() {
    return min;
  }

  /**
   * Sets the value of the 'min' field.
   * Min value of data.   * @param value the value to set.
   */
  public void setMin(java.lang.Double value) {
    this.min = value;
  }

  /**
   * Gets the value of the 'max' field.
   * Max value of data.   */
  public java.lang.Double getMax() {
    return max;
  }

  /**
   * Sets the value of the 'max' field.
   * Max value of data.   * @param value the value to set.
   */
  public void setMax(java.lang.Double value) {
    this.max = value;
  }

  /**
   * Gets the value of the 'total' field.
   * Sum of data.   */
  public java.lang.Double getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * Sum of data.   * @param value the value to set.
   */
  public void setTotal(java.lang.Double value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'variance' field.
   * Variance of data.   */
  public java.lang.Double getVariance() {
    return variance;
  }

  /**
   * Sets the value of the 'variance' field.
   * Variance of data.   * @param value the value to set.
   */
  public void setVariance(java.lang.Double value) {
    this.variance = value;
  }

  /**
   * Gets the value of the 'sumSq' field.
   * Sum of Squares of data.   */
  public java.lang.Double getSumSq() {
    return sumSq;
  }

  /**
   * Sets the value of the 'sumSq' field.
   * Sum of Squares of data.   * @param value the value to set.
   */
  public void setSumSq(java.lang.Double value) {
    this.sumSq = value;
  }

  /** Creates a new DescriptiveStatsRecord RecordBuilder */
  public static com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder newBuilder() {
    return new com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder();
  }
  
  /** Creates a new DescriptiveStatsRecord RecordBuilder by copying an existing Builder */
  public static com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder newBuilder(com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder other) {
    return new com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder(other);
  }
  
  /** Creates a new DescriptiveStatsRecord RecordBuilder by copying an existing DescriptiveStatsRecord instance */
  public static com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder newBuilder(com.wibidata.wikimedia.avro.DescriptiveStatsRecord other) {
    return new com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for DescriptiveStatsRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DescriptiveStatsRecord>
    implements org.apache.avro.data.RecordBuilder<DescriptiveStatsRecord> {

    private java.lang.Double size;
    private java.lang.Double mean;
    private java.lang.Double min;
    private java.lang.Double max;
    private java.lang.Double total;
    private java.lang.Double variance;
    private java.lang.Double sumSq;

    /** Creates a new Builder */
    private Builder() {
      super(com.wibidata.wikimedia.avro.DescriptiveStatsRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing DescriptiveStatsRecord instance */
    private Builder(com.wibidata.wikimedia.avro.DescriptiveStatsRecord other) {
            super(com.wibidata.wikimedia.avro.DescriptiveStatsRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.size)) {
        this.size = data().deepCopy(fields()[0].schema(), other.size);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.mean)) {
        this.mean = data().deepCopy(fields()[1].schema(), other.mean);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.min)) {
        this.min = data().deepCopy(fields()[2].schema(), other.min);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.max)) {
        this.max = data().deepCopy(fields()[3].schema(), other.max);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.total)) {
        this.total = data().deepCopy(fields()[4].schema(), other.total);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.variance)) {
        this.variance = data().deepCopy(fields()[5].schema(), other.variance);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.sumSq)) {
        this.sumSq = data().deepCopy(fields()[6].schema(), other.sumSq);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'size' field */
    public java.lang.Double getSize() {
      return size;
    }
    
    /** Sets the value of the 'size' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder setSize(java.lang.Double value) {
      validate(fields()[0], value);
      this.size = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'size' field has been set */
    public boolean hasSize() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'size' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder clearSize() {
      size = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'mean' field */
    public java.lang.Double getMean() {
      return mean;
    }
    
    /** Sets the value of the 'mean' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder setMean(java.lang.Double value) {
      validate(fields()[1], value);
      this.mean = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'mean' field has been set */
    public boolean hasMean() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'mean' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder clearMean() {
      mean = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'min' field */
    public java.lang.Double getMin() {
      return min;
    }
    
    /** Sets the value of the 'min' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder setMin(java.lang.Double value) {
      validate(fields()[2], value);
      this.min = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'min' field has been set */
    public boolean hasMin() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'min' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder clearMin() {
      min = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'max' field */
    public java.lang.Double getMax() {
      return max;
    }
    
    /** Sets the value of the 'max' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder setMax(java.lang.Double value) {
      validate(fields()[3], value);
      this.max = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'max' field has been set */
    public boolean hasMax() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'max' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder clearMax() {
      max = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'total' field */
    public java.lang.Double getTotal() {
      return total;
    }
    
    /** Sets the value of the 'total' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder setTotal(java.lang.Double value) {
      validate(fields()[4], value);
      this.total = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'total' field has been set */
    public boolean hasTotal() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'total' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder clearTotal() {
      total = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'variance' field */
    public java.lang.Double getVariance() {
      return variance;
    }
    
    /** Sets the value of the 'variance' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder setVariance(java.lang.Double value) {
      validate(fields()[5], value);
      this.variance = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'variance' field has been set */
    public boolean hasVariance() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'variance' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder clearVariance() {
      variance = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'sumSq' field */
    public java.lang.Double getSumSq() {
      return sumSq;
    }
    
    /** Sets the value of the 'sumSq' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder setSumSq(java.lang.Double value) {
      validate(fields()[6], value);
      this.sumSq = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'sumSq' field has been set */
    public boolean hasSumSq() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'sumSq' field */
    public com.wibidata.wikimedia.avro.DescriptiveStatsRecord.Builder clearSumSq() {
      sumSq = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public DescriptiveStatsRecord build() {
      try {
        DescriptiveStatsRecord record = new DescriptiveStatsRecord();
        record.size = fieldSetFlags()[0] ? this.size : (java.lang.Double) defaultValue(fields()[0]);
        record.mean = fieldSetFlags()[1] ? this.mean : (java.lang.Double) defaultValue(fields()[1]);
        record.min = fieldSetFlags()[2] ? this.min : (java.lang.Double) defaultValue(fields()[2]);
        record.max = fieldSetFlags()[3] ? this.max : (java.lang.Double) defaultValue(fields()[3]);
        record.total = fieldSetFlags()[4] ? this.total : (java.lang.Double) defaultValue(fields()[4]);
        record.variance = fieldSetFlags()[5] ? this.variance : (java.lang.Double) defaultValue(fields()[5]);
        record.sumSq = fieldSetFlags()[6] ? this.sumSq : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
